name: Cipher Tools Application CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      shell: bash
    
    - name: Test with pytest
      run: |
        pytest tests/
      shell: bash

  build:
    needs: test
    runs-on: windows-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Build command-line executable
      run: |
        pyinstaller --onefile --name cipher_tool cipher_tool.py
      shell: bash
      
    - name: Build GUI executable
      run: |
        pyinstaller --onefile --windowed --name cipher_gui cipher_gui.py
      shell: bash
    
    - name: Create batch launcher
      run: |
        copy run_cipher_app.bat dist\run_cipher_app.bat
      shell: cmd
    
    - name: Package executables
      run: |
        # GitHub-hosted Windows runners have 7zip pre-installed
        cd dist
        7z a -tzip cipher_tools_windows.zip cipher_tool.exe cipher_gui.exe run_cipher_app.bat
        cd ..
      shell: bash
    
    - name: Get version
      id: get_version
      run: |
        echo "VERSION=$(python -c "import re; version = re.search(r'version=\"(.*?)\"', open('setup.py').read()).group(1); print(version)")" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Cipher Tools v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          Cipher Tools Application - Release ${{ steps.get_version.outputs.VERSION }}
          
          This release includes both the command-line and GUI versions of the application.
          
          ### Included files:
          - cipher_tool.exe - Command-line interface
          - cipher_gui.exe - Graphical user interface
          - run_cipher_app.bat - Launcher script
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/cipher_tools_windows.zip
        asset_name: cipher_tools_windows.zip
        asset_content_type: application/zip
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: cipher-tools
        path: dist/cipher_tools_windows.zip
